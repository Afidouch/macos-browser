name: Publish Internal Release to Sparkle

on:
  workflow_dispatch:
    inputs:
      asana-task-url:
        description: "Asana release task URL"
        required: true
        type: string
      tag:
        description: "Tag to publish"
        required: true
        type: string

jobs:

  publish-to-sparkle:

    name: Publish internal release to Sparkle

    runs-on: macos-13-xlarge
    timeout-minutes: 10

    steps:

      - name: Verify the tag
        id: verify-tag
        env:
          tag: ${{ github.event.inputs.tag }}
        run: |
          tag_regex='^[0-9]+\.[0-9]+\.[0-9]+-[0-9]+$'

          if [[ ! "$tag" =~ $tag_regex ]]; then
            echo "::error::The provided tag ($tag) has incorrect format (attempted to match ${tag_regex})."
            exit 1
          fi
          echo "tag=$(tr '-' '.' <<< $tag)" >> $GITHUB_OUTPUT

      - name: Check out the code
        uses: actions/checkout@v4
        with:
          submodules: recursive
    
      - name: Set up Sparkle tools
        env:
          SPARKLE_URL: https://github.com/sparkle-project/Sparkle/releases/download/${{ vars.SPARKLE_VERSION }}/Sparkle-${{ vars.SPARKLE_VERSION }}.tar.xz
        run: |
          curl -fLSs $SPARKLE_URL | tar xJ bin
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH

      - name: Fetch DMG
        id: fetch-dmg
        env:
          DMG_NAME: duckduckgo-${{ steps.verify-tag.outputs.tag }}.dmg
        run: |
          DMG_URL="${{ vars.TEST_DMG_URL_ROOT }}${DMG_NAME}"
          curl -fLSs -o "$DMG_NAME" "$DMG_URL"
          echo "dmg-path=$DMG_NAME" >> $GITHUB_OUTPUT

      - name: Extract Asana Task ID
        id: task-id
        uses: ./.github/actions/asana-extract-task-id
        with:
          task-url: ${{ github.event.inputs.asana-task-url }}

      - name: Fetch release notes
        env:
          TASK_ID: ${{ steps.task-id.outputs.task-id }}
          ASANA_ACCESS_TOKEN: ${{ secrets.ASANA_ACCESS_TOKEN }}
        run: |
          curl -fLSs "https://app.asana.com/api/1.0/tasks/${TASK_ID}?opt_fields=notes" \
            -H "Authorization: Bearer ${ASANA_ACCESS_TOKEN}" \
            | jq -r .data.notes \
            | ./scripts/extract_release_notes.sh > release_notes.txt

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode_$(<.xcode-version).app/Contents/Developer

      - name: Generate appcast
        id: appcast
        env:
          DMG_PATH: ${{ steps.fetch-dmg.outputs.dmg-path }}
          SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
        run: |
          echo -n "$SPARKLE_PRIVATE_KEY" > sparkle_private_key
          chmod 600 sparkle_private_key

          ./scripts/appcast_manager/appcastManager.swift \
            --release-to-internal-channel \
            --dmg ${DMG_PATH} \
            --release-notes release_notes.txt \
            --key sparkle_private_key

      - name: Upload appcast diff artifact
        uses: actions/upload-artifact@v4
        with:
          name: appcast2-${{ steps.verify-tag.outputs.tag }}.patch
          path: ${{ github.workspace }}/sparkle-updates/appcast_diff.txt

      - name: Upload to S3
        id: upload
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.TEST_AWS_DEFAULT_REGION }}
        run: |
          # Back up existing appcast2.xml
          wget -q -O appcast2_old.xml ${{ vars.DMG_URL_ROOT }}appcast2.xml

          # Upload files to S3
          ./scripts/upload_to_s3/upload_to_s3.sh --run --force

      # - name: Set up Asana templates
      #   if: always()
      #   id: asana-templates
      #   run: |
      #     if [[ ${{ steps.upload.outcome }} == "success" ]]; then
      #       echo "task-template=s3-upload-success" >> $GITHUB_OUTPUT
      #       echo "comment-template=internal-release-ready-merge-failed" >> $GITHUB_OUTPUT
      #     elif [[ ${{ steps.appcast.outcome }} == "success" ]]; then
      #       echo "task-template=s3-upload-success" >> $GITHUB_OUTPUT
      #       echo "comment-template=internal-release-ready-tag-failed" >> $GITHUB_OUTPUT
      #     else
      #       echo "task-template=s3-upload-failed" >> $GITHUB_OUTPUT
      #       echo "comment-template=internal-release-ready-tag-failed" >> $GITHUB_OUTPUT
      #     fi

      # - name: Create Asana task on failure
      #   id: create-task-on-failure
      #   if: failure()
      #   uses: ./.github/actions/asana-create-action-item
      #   with:
      #     access-token: ${{ secrets.ASANA_ACCESS_TOKEN }}
      #     release-task-url: ${{ env.asana-task-url }}
      #     template-name: ${{ steps.asana-templates.outputs.task-template }}

      # - name: Report failure
      #   if: failure()
      #   uses: ./.github/actions/asana-log-message
      #   env:
      #     ASSIGNEE_ID: ${{ steps.create-task-on-failure.outputs.assignee-id }}
      #     TASK_ID: ${{ steps.create-task-on-failure.outputs.new-task-id }}
      #   with:
      #     access-token: ${{ secrets.ASANA_ACCESS_TOKEN }}
      #     task-url: ${{ env.asana-task-url }}
      #     template-name: ${{ steps.asana-templates.outputs.comment-template }}

      # - name: Report success
      #   if: success()
      #   uses: ./.github/actions/asana-log-message
      #   with:
      #     access-token: ${{ secrets.ASANA_ACCESS_TOKEN }}
      #     task-url: ${{ env.asana-task-url }}
      #     template-name: internal-release-ready
